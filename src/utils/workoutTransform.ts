// Data transformation utilities for workout schema migration
// Generated by Agent Beta for parallel agent coordination

import type { 
  WorkoutData, 
  Assessment, 
  DetailedInstruction, 
  TransformationContext,
  TransformationResult,
  LegacyAssessment,
  TimelineEntry,
  Exercise
} from '../types/workout';

/**
 * Main transformation function - converts legacy formats to unified schema
 */
export function transformWorkoutData(
  legacyData: any, 
  context: TransformationContext
): TransformationResult {
  try {
    const transformedData: WorkoutData = {
      metadata: transformMetadata(legacyData),
      assessments: transformAssessments(legacyData),
      timeline: transformTimeline(legacyData),
    };

    // Add optional sections if they exist
    if (legacyData.skill_training) {
      transformedData.skill_training = transformSkillTraining(legacyData.skill_training);
    }

    if (legacyData.conditioning_blocks || legacyData.strength_training) {
      transformedData.conditioning_blocks = transformConditioningBlocks(legacyData);
    }

    if (legacyData.recovery_protocols || legacyData.recovery_protocol) {
      transformedData.recovery_protocols = transformRecoveryProtocols(legacyData);
    }

    // Preserve legacy compatibility sections
    transformedData.pre_week_assessment = legacyData.pre_week_assessment;
    transformedData.morning_protocol = legacyData.morning_protocol;
    transformedData.tennis_training = legacyData.tennis_training;
    transformedData.strength_training = legacyData.strength_training;
    transformedData.recovery_protocol = legacyData.recovery_protocol;

    return {
      success: true,
      data: transformedData,
      contentPreserved: true,
      errors: [],
      warnings: []
    };

  } catch (error) {
    return {
      success: false,
      errors: [error instanceof Error ? error.message : String(error)],
      contentPreserved: false
    };
  }
}

/**
 * Transform metadata section
 */
function transformMetadata(legacyData: any) {
  const metadata = legacyData.metadata || {};
  
  return {
    period: metadata.period || metadata.week || 1,
    period_name: metadata.period_name || metadata.week_name || "Foundation Phase",
    day_id: metadata.day_id || `week_${metadata.week || 1}_${metadata.day || 'monday'}`,
    day_name: metadata.day_name || metadata.day || "Monday",
    title: metadata.title || "Workout Title",
    subtitle: metadata.subtitle || "Workout Subtitle",
    phase: metadata.phase || "Training Phase",
    focus_areas: metadata.focus_areas || [metadata.focus || "General Training"],
    training_parameters: {
      volume: metadata.training_parameters?.volume || metadata.volume_target || "100%",
      intensity: metadata.training_parameters?.intensity || metadata.intensity_target || "70-80%",
      density: metadata.training_parameters?.density || "moderate",
      duration: metadata.training_parameters?.duration || metadata.duration || "90 minutes"
    },
    elite_methods: metadata.elite_methods || [],
    equipment_required: {
      essential: metadata.equipment_required?.essential || metadata.equipment_needed || [],
      optional: metadata.equipment_required?.optional || []
    },
    navigation: {
      daily: metadata.navigation?.daily || "",
      overview_link: metadata.navigation?.overview_link || "./",
      next_link: metadata.navigation?.next_link || metadata.navigation?.next_day_link,
      previous_link: metadata.navigation?.previous_link || metadata.navigation?.prev_day_link
    },
    display_config: metadata.display_config
  };
}

/**
 * Transform assessments - handles multiple legacy formats
 */
function transformAssessments(legacyData: any): Assessment[] {
  const assessments: Assessment[] = [];

  // Handle existing assessments array (Monday format)
  if (legacyData.assessments) {
    assessments.push(...legacyData.assessments);
  }

  // Handle daily_assessment (Tuesday format)
  if (legacyData.daily_assessment) {
    assessments.push(transformDailyAssessment(legacyData.daily_assessment));
  }

  // Handle mid_week_assessment (Wednesday format)  
  if (legacyData.mid_week_assessment) {
    assessments.push(transformMidWeekAssessment(legacyData.mid_week_assessment));
  }

  // Handle weekly_performance_assessment (Friday format)
  if (legacyData.weekly_performance_assessment) {
    assessments.push(transformWeeklyAssessment(legacyData.weekly_performance_assessment));
  }

  // Handle other assessment formats
  if (legacyData.recovery_assessment) {
    assessments.push(transformRecoveryAssessment(legacyData.recovery_assessment));
  }

  if (legacyData.thursday_assessment) {
    assessments.push(transformThursdayAssessment(legacyData.thursday_assessment));
  }

  return assessments;
}

/**
 * Transform daily assessment format
 */
function transformDailyAssessment(dailyAssessment: any): Assessment {
  return {
    id: "daily_assessment",
    type: "daily",
    title: dailyAssessment.title || "Daily Assessment",
    timing: "pre-session",
    duration: "10 minutes",
    description: "Daily assessment and comparison",
    components: [{
      id: "daily_comparison",
      name: "Daily Comparison",
      type: "physiological",
      category: "primary",
      measurement: {
        protocol: "Comparison with baseline",
        equipment: "None"
      }
    }],
    comparison_table: dailyAssessment.comparison_table
  };
}

/**
 * Transform mid-week assessment format
 */
function transformMidWeekAssessment(midWeekAssessment: any): Assessment {
  return {
    id: "mid_week_assessment", 
    type: "progress",
    title: midWeekAssessment.title || "Mid-Week Assessment",
    timing: "pre-session",
    duration: midWeekAssessment.duration || "10 minutes",
    description: "Mid-week readiness assessment",
    components: [{
      id: "readiness_check",
      name: "Readiness Check",
      type: "physiological", 
      category: "primary",
      measurement: {
        protocol: "HRV and readiness assessment",
        equipment: "HRV monitor"
      }
    }]
  };
}

/**
 * Transform weekly assessment format
 */
function transformWeeklyAssessment(weeklyAssessment: any): Assessment {
  return {
    id: "weekly_performance_assessment",
    type: "weekly", 
    title: weeklyAssessment.title || "Weekly Assessment",
    timing: "pre-session",
    duration: "10 minutes", 
    description: "Weekly performance assessment",
    components: [{
      id: "weekly_comparison",
      name: "Weekly Comparison",
      type: "physiological",
      category: "primary", 
      measurement: {
        protocol: "Weekly comparison with baseline",
        equipment: "Various"
      }
    }],
    comparison_table: weeklyAssessment.comparison_table
  };
}

/**
 * Transform recovery assessment format
 */
function transformRecoveryAssessment(recoveryAssessment: any): Assessment {
  return {
    id: "recovery_assessment",
    type: "progress",
    title: recoveryAssessment.title || "Recovery Assessment", 
    timing: "pre-session",
    duration: "10 minutes",
    description: "Recovery status assessment",
    components: [{
      id: "recovery_status",
      name: "Recovery Status",
      type: "physiological",
      category: "primary",
      measurement: {
        protocol: "Recovery comparison",
        equipment: "None"
      }
    }]
  };
}

/**
 * Transform Thursday assessment format
 */
function transformThursdayAssessment(thursdayAssessment: any): Assessment {
  return {
    id: "thursday_assessment",
    type: "progress", 
    title: thursdayAssessment.title || "Thursday Assessment",
    timing: "pre-session",
    duration: "10 minutes",
    description: "Thursday assessment summary",
    components: [{
      id: "thursday_metrics",
      name: "Thursday Metrics",
      type: "physiological",
      category: "primary",
      measurement: {
        protocol: "Weekly progress check",
        equipment: "None"
      }
    }]
  };
}

/**
 * Transform timeline - handles different timeline formats
 */
function transformTimeline(legacyData: any): TimelineEntry[] {
  // If timeline already exists (Monday format), use it
  if (legacyData.timeline) {
    return legacyData.timeline;
  }

  // Build timeline from schedule blocks
  if (legacyData.schedule?.blocks) {
    return legacyData.schedule.blocks.map((block: any, index: number) => {
      const [timeStart, timeEnd] = block.time.split('-');
      return {
        time_start: timeStart.trim(),
        time_end: timeEnd.trim(), 
        duration: calculateDuration(timeStart.trim(), timeEnd.trim()),
        category: block.type || 'main',
        phase_id: block.id || `phase_${index}`,
        phase_title: block.title,
        phase_icon: getPhaseIcon(block.type),
        activity: block.activities?.[0]?.name || block.title,
        description: block.activities?.[0]?.description || '',
        location: block.carousel_data?.location || 'gym'
      };
    });
  }

  // Build basic timeline from sections
  const timeline: TimelineEntry[] = [];
  let currentTime = '07:00';

  if (legacyData.daily_assessment || legacyData.mid_week_assessment) {
    timeline.push({
      time_start: currentTime,
      time_end: addMinutes(currentTime, 10),
      duration: 10,
      category: 'assessment',
      phase_id: 'assessment',
      phase_title: 'Assessment',
      phase_icon: '📊',
      activity: 'Daily Assessment',
      description: 'Assessment and readiness check',
      location: 'home'
    });
    currentTime = addMinutes(currentTime, 15);
  }

  if (legacyData.tennis_training) {
    timeline.push({
      time_start: currentTime,
      time_end: addMinutes(currentTime, 60), 
      duration: 60,
      category: 'main',
      phase_id: 'tennis',
      phase_title: 'Tennis Training',
      phase_icon: '🎾',
      activity: 'Tennis Session',
      description: 'Tennis-specific training',
      location: 'court'
    });
    currentTime = addMinutes(currentTime, 65);
  }

  if (legacyData.strength_training) {
    timeline.push({
      time_start: currentTime,
      time_end: addMinutes(currentTime, 80),
      duration: 80, 
      category: 'main',
      phase_id: 'strength',
      phase_title: 'Strength Training',
      phase_icon: '💪',
      activity: 'Strength Session',
      description: 'Strength and conditioning',
      location: 'gym'
    });
    currentTime = addMinutes(currentTime, 85);
  }

  return timeline;
}

/**
 * Transform skill training sections
 */
function transformSkillTraining(skillTraining: any) {
  return {
    sessions: skillTraining.sessions || []
  };
}

/**
 * Transform conditioning blocks
 */
function transformConditioningBlocks(legacyData: any) {
  const blocks = [];

  if (legacyData.conditioning_blocks) {
    blocks.push(...legacyData.conditioning_blocks);
  }

  if (legacyData.strength_training) {
    blocks.push({
      id: 'strength_block',
      type: 'strength',
      title: legacyData.strength_training.title || 'Strength Training',
      description: legacyData.strength_training.session_name || '',
      duration: `${legacyData.strength_training.total_duration || 80} minutes`,
      exercises: transformExercises(legacyData.strength_training.main_exercises || [])
    });
  }

  return blocks;
}

/**
 * Transform exercises - standardize instruction format
 */
function transformExercises(exercises: any[]): Exercise[] {
  return exercises.map(exercise => ({
    id: exercise.exercise_id || exercise.id || 'exercise',
    name: exercise.name,
    category: exercise.category || 'primary',
    order: exercise.order || 1,
    loading: {
      sets: exercise.sets?.toString() || '3',
      reps: exercise.reps?.toString() || '10', 
      intensity: exercise.load || exercise.intensity,
      rest_seconds: exercise.rest_seconds || 120,
      tempo: exercise.tempo
    },
    detailed_instructions: transformInstructions(exercise),
    cues: exercise.cues || exercise.technique_cues || exercise.professional_cues || [],
    set_tracking: exercise.set_tracking,
    benefits: exercise.benefits,
    video_url: exercise.video_url
  }));
}

/**
 * Transform instructions to standardized format
 */
function transformInstructions(exercise: any): DetailedInstruction[] {
  // If already in detailed format, return as-is
  if (exercise.detailed_instructions && Array.isArray(exercise.detailed_instructions)) {
    // Check if first item has phase property
    if (exercise.detailed_instructions[0]?.phase) {
      return exercise.detailed_instructions;
    }
    
    // Convert string array to structured format
    return exercise.detailed_instructions.map((instruction: string, index: number) => ({
      phase: index === 0 ? 'SETUP' : 'EXECUTION',
      instruction
    }));
  }

  // Handle simple instructions array
  if (exercise.instructions && Array.isArray(exercise.instructions)) {
    return exercise.instructions.map((instruction: string, index: number) => ({
      phase: getPhaseFromInstruction(instruction, index),
      instruction
    }));
  }

  // Handle technique_points format (from Tuesday)
  if (exercise.technique_points && Array.isArray(exercise.technique_points)) {
    return exercise.technique_points;
  }

  return [];
}

/**
 * Determine phase from instruction content
 */
function getPhaseFromInstruction(instruction: string, index: number): string {
  const upperInstruction = instruction.toUpperCase();
  
  if (upperInstruction.includes('SETUP') || upperInstruction.includes('POSITION')) {
    return 'SETUP';
  }
  if (upperInstruction.includes('BREATHING') || upperInstruction.includes('BREATHE')) {
    return 'BREATHING';
  }
  if (upperInstruction.includes('DESCENT') || upperInstruction.includes('LOWER')) {
    return 'DESCENT';
  }
  if (upperInstruction.includes('ASCENT') || upperInstruction.includes('DRIVE') || upperInstruction.includes('PRESS')) {
    return 'ASCENT';
  }
  if (upperInstruction.includes('COMPLETION') || upperInstruction.includes('FINISH')) {
    return 'COMPLETION';
  }
  
  // Default phases based on order
  if (index === 0) return 'SETUP';
  if (index === 1) return 'EXECUTION';
  return 'COMPLETION';
}

/**
 * Transform recovery protocols
 */
function transformRecoveryProtocols(legacyData: any) {
  const protocols = [];

  if (legacyData.recovery_protocols) {
    protocols.push(...legacyData.recovery_protocols);
  }

  if (legacyData.recovery_protocol) {
    protocols.push({
      id: 'main_recovery',
      type: 'immediate',
      title: legacyData.recovery_protocol.title || 'Recovery Protocol',
      duration: `${legacyData.recovery_protocol.duration || 20} minutes`,
      timing: 'post-training',
      components: []
    });
  }

  return protocols;
}

/**
 * Helper function to calculate duration between times
 */
function calculateDuration(startTime: string, endTime: string): number {
  const start = parseTime(startTime);
  const end = parseTime(endTime);
  return end - start;
}

/**
 * Helper function to parse time string to minutes
 */
function parseTime(timeStr: string): number {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

/**
 * Helper function to add minutes to time string
 */
function addMinutes(timeStr: string, minutesToAdd: number): string {
  const totalMinutes = parseTime(timeStr) + minutesToAdd;
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

/**
 * Helper function to get phase icon
 */
function getPhaseIcon(type: string): string {
  const iconMap: Record<string, string> = {
    assessment: '📊',
    preparation: '🏃',
    main: '💪',
    recovery: '🧘',
    tennis: '🎾',
    strength: '💪',
    conditioning: '🔥'
  };
  return iconMap[type] || '⚡';
}

/**
 * Validation function to ensure data integrity
 */
export function validateWorkoutData(data: WorkoutData): string[] {
  const errors: string[] = [];

  // Check required fields
  if (!data.metadata?.day_id) {
    errors.push('Missing required field: metadata.day_id');
  }
  if (!data.metadata?.title) {
    errors.push('Missing required field: metadata.title');
  }
  if (!data.timeline || data.timeline.length === 0) {
    errors.push('Missing required field: timeline array');
  }
  if (!data.assessments || data.assessments.length === 0) {
    errors.push('Missing required field: assessments array');
  }

  // Validate timeline consistency
  data.timeline?.forEach((entry, index) => {
    if (parseTime(entry.time_end) <= parseTime(entry.time_start)) {
      errors.push(`Timeline entry ${index}: end time must be after start time`);
    }
    
    const calculatedDuration = calculateDuration(entry.time_start, entry.time_end);
    if (Math.abs(calculatedDuration - entry.duration) > 1) {
      errors.push(`Timeline entry ${index}: duration mismatch`);
    }
  });

  return errors;
}

/**
 * Backward compatibility check
 */
export function ensureBackwardCompatibility(data: WorkoutData): WorkoutData {
  // Ensure legacy sections exist for component compatibility
  if (!data.pre_week_assessment && data.assessments.some(a => a.type === 'baseline')) {
    data.pre_week_assessment = {
      title: 'Pre-Week Assessment',
      duration: '20 minutes',
      description: 'Baseline assessment',
      movement_screen: []
    };
  }

  return data;
}

export { type WorkoutData, type TransformationContext, type TransformationResult };