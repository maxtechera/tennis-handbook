// TypeScript interfaces for unified workout schema
// Generated by Agent Beta based on UNIFIED_SCHEMA.yml

// Basic metadata structure
export interface WorkoutMetadata {
  // Basic identifiers - REQUIRED
  period: number;
  period_name: string;
  day_id: string;
  day_name: string;

  // Workout details - REQUIRED
  title: string;
  subtitle: string;
  phase: string;
  focus_areas: string[];

  // Training parameters - REQUIRED
  training_parameters: {
    volume: string;
    intensity: string;
    density: string;
    duration: string;
  };

  // Elite Method Attribution - OPTIONAL
  elite_methods?: EliteMethod[];

  // Equipment needed - REQUIRED
  equipment_required: {
    essential: string[];
    optional?: string[];
  };

  // Navigation - REQUIRED
  navigation: {
    daily: string;
    overview_link: string;
    next_link: string | null;
    previous_link: string | null;
  };

  // Display configuration - OPTIONAL
  display_config?: {
    section_headers?: Record<string, string>;
    ui_elements?: UIElement[];
  };
}

// Elite method attribution
export interface EliteMethod {
  name: string;
  type: 'strength' | 'power' | 'skill' | 'recovery';
  attribution: {
    athlete?: string;
    coach?: string;
    academy?: string;
    quote?: string;
    source?: string;
    verification?: string;
    year?: string;
    context?: string;
    results?: string;
  };
}

// UI element for display configuration
export interface UIElement {
  type: 'info' | 'warning' | 'tip' | 'success';
  title: string;
  content: string;
  icon?: string;
}

// Assessment structure
export interface Assessment {
  id: string;
  type: 'baseline' | 'daily' | 'progress' | 'weekly';
  title: string;
  timing: 'pre-session' | 'during' | 'post-session';
  duration: string;
  description: string;

  // Attribution - OPTIONAL
  attribution?: {
    source?: string;
    methodology?: string;
    validation?: string;
    elite_use?: string;
  };

  // Assessment components - REQUIRED
  components: AssessmentComponent[];

  // Comparison data for progress assessments - OPTIONAL
  comparison_table?: {
    headers: string[];
    rows: ComparisonRow[];
  };
}

// Assessment component
export interface AssessmentComponent {
  id: string;
  name: string;
  type: 'movement' | 'strength' | 'power' | 'skill' | 'physiological';
  category: 'primary' | 'secondary' | 'optional';

  // Measurement protocol - REQUIRED
  measurement: {
    protocol: string;
    repetitions?: string;
    duration?: string;
    equipment: string;
  };

  // Performance standards - OPTIONAL
  standards?: {
    elite_benchmark?: string;
    good_standard?: string;
    needs_work?: string;
  };

  // Scoring/tracking - OPTIONAL
  scoring?: {
    method?: string;
    scale?: string;
    recording?: string;
  };

  // Context and application - OPTIONAL
  context?: {
    description?: string;
    research?: string;
    application?: string;
  };

  // Standardized instructions
  detailed_instructions?: DetailedInstruction[];
  cues?: string[];
}

// Comparison row for progress tracking
export interface ComparisonRow {
  metric: string;
  baseline: string;
  current: string;
  change?: string;
}

// Timeline structure for WorkoutCarousel
export interface TimelineEntry {
  time_start: string;  // 24-hour format HH:MM
  time_end: string;    // 24-hour format HH:MM
  duration: number;    // Duration in minutes
  category: 'assessment' | 'preparation' | 'main' | 'recovery';
  phase_id: string;    // Unique phase identifier
  phase_title: string;
  phase_icon: string;  // Emoji
  activity: string;
  description: string;
  location: 'gym' | 'court' | 'home' | 'recovery_area';
}

// Standardized instruction format
export interface DetailedInstruction {
  phase: string;      // SETUP, EXECUTION, COMPLETION, etc.
  instruction: string;
}

// Skill training session
export interface SkillTrainingSession {
  id: string;
  type: 'technical' | 'tactical' | 'integrated';
  title: string;
  duration: string;
  intensity: string;

  // Attribution - OPTIONAL
  attribution?: {
    methodology?: string;
    elite_use?: string;
  };

  components: SkillComponent[];
}

// Skill training component
export interface SkillComponent {
  id: string;
  name: string;
  type: 'drill' | 'exercise' | 'game';
  category: 'primary' | 'auxiliary' | 'optional';

  // Time allocation
  time_structure: {
    type: 'duration' | 'sets_reps' | 'intervals';
    value: string;
    rest?: string;
  };

  // Instructions and cues
  detailed_instructions: DetailedInstruction[];
  cues: string[];

  // Success criteria - OPTIONAL
  success_criteria?: SuccessCriterion[];
}

// Success criterion
export interface SuccessCriterion {
  metric: string;
  target: string;
  tracking: string;
}

// Conditioning block
export interface ConditioningBlock {
  id: string;
  type: 'strength' | 'power' | 'endurance' | 'mixed';
  title: string;
  description: string;
  duration: string;

  exercises: Exercise[];
}

// Exercise structure
export interface Exercise {
  id: string;
  name: string;
  category: 'primary' | 'auxiliary' | 'corrective';
  order: number;

  // Loading parameters - REQUIRED
  loading: {
    sets: string;
    reps: string;
    intensity?: string;
    rest_seconds: number;
    tempo?: string;
  };

  // Instructions - REQUIRED
  detailed_instructions: DetailedInstruction[];
  
  // Legacy support for simple instructions
  instructions?: string[];

  // Coaching cues - REQUIRED
  cues: string[];

  // Set tracking template - OPTIONAL
  set_tracking?: SetTracking[];

  // Exercise benefits - OPTIONAL
  benefits?: {
    primary?: string;
    secondary?: string;
    sport_specific?: string;
  };

  // Video URL - OPTIONAL
  video_url?: string;
}

// Set tracking for exercise logging
export interface SetTracking {
  set: number;
  target_reps?: number;
  actual_reps?: string;  // For recording
  rpe?: string;          // RPE if used
  notes?: string;        // Notes field
}

// Recovery protocol
export interface RecoveryProtocol {
  id: string;
  type: 'immediate' | 'delayed' | 'next_day';
  title: string;
  duration: string;
  timing: string;

  components: RecoveryComponent[];
}

// Recovery component
export interface RecoveryComponent {
  id: string;
  name: string;
  type: 'mobility' | 'therapy' | 'breathing' | 'nutrition';
  duration: string;
  order: number;

  // Instructions
  detailed_instructions: DetailedInstruction[];

  // Target areas
  focus_areas?: string[];
}

// Schedule block
export interface ScheduleBlock {
  id: string;
  time: string;  // Time range format "HH:MM-HH:MM"
  title: string;
  type: 'assessment' | 'preparation' | 'main' | 'recovery';

  activities: ScheduleActivity[];

  // Optional carousel data
  carousel_data?: {
    phase_id: string;
    phase_title: string;
    phase_icon: string;
    location: string;
  };
}

// Schedule activity
export interface ScheduleActivity {
  name: string;
  duration: string;
  type: 'warm-up' | 'main' | 'cool-down';
  description: string;
}

// Performance metric
export interface PerformanceMetric {
  id: string;
  name: string;
  type: 'quantitative' | 'qualitative';
  category: 'strength' | 'power' | 'endurance' | 'skill';

  measurement: {
    method: string;
    frequency: 'Daily' | 'Weekly' | 'Monthly';
    equipment: string;
  };

  standards: {
    elite: string;
    good: string;
    average: string;
  };

  tracking: {
    baseline: string;
    current: string;
    target: string;
    trend: 'improving' | 'stable' | 'declining';
  };
}

// Main workout data interface
export interface WorkoutData {
  metadata: WorkoutMetadata;
  assessments: Assessment[];
  timeline: TimelineEntry[];
  
  // Optional sections based on workout type
  skill_training?: {
    sessions: SkillTrainingSession[];
  };
  
  conditioning_blocks?: ConditioningBlock[];
  recovery_protocols?: RecoveryProtocol[];
  
  schedule?: {
    type: string;
    total_duration: string;
    blocks: ScheduleBlock[];
  };
  
  monitoring?: {
    performance_metrics: PerformanceMetric[];
  };

  // Legacy compatibility sections
  pre_week_assessment?: LegacyPreWeekAssessment;
  morning_protocol?: LegacyMorningProtocol;
  tennis_training?: LegacyTennisTraining;
  strength_training?: LegacyStrengthTraining;
  recovery_protocol?: LegacyRecoveryProtocol;
}

// Legacy compatibility interfaces
export interface LegacyPreWeekAssessment {
  title: string;
  duration: string;
  description: string;
  movement_screen?: LegacyMovementScreen[];
}

export interface LegacyMovementScreen {
  name: string;
  reps: string;
  method: string;
  elite_standard: string;
  professional_notes: string;
  research?: string;
  imbalance_detection?: string;
  tennis_application?: string;
  elite_benchmark?: string;
}

export interface LegacyMorningProtocol {
  phase_id: string;
  title: string;
  anchor_id: string;
  
  yoga_breathing?: {
    yoga_flow?: {
      name: string;
      duration: string;
      method: string;
      focus: string;
      video_url?: string;
      detailed_instructions?: string[];
      cues?: string[];
      professional_notes?: string[];
    };
    
    breathing_protocol?: {
      name: string;
      duration: string;
      pattern: string;
      technique: string;
      detailed_instructions?: string[];
      cues?: string[];
      parasympathetic_goals?: string[];
    };
  };
  
  professional_assessment?: {
    time: string;
    duration: number;
    title: string;
    assessments?: LegacyAssessment[];
  };
  
  mindful_preparation?: {
    duration: string;
    focus: string;
    goal: string;
  };
}

export interface LegacyAssessment {
  name: string;
  protocol: string;
  standard: string;
  notes: string;
  detailed_instructions?: string[];
  cues?: string[];
  metrics?: string[];
  tests?: Record<string, string>;
  checks?: string[];
}

export interface LegacyTennisTraining {
  phase_id: string;
  title: string;
  anchor_id: string;
  category?: string;
  total_duration?: number;
  court_time?: number;
  intensity_avg?: string;
  
  // Various tennis training structures from different files
  alcaraz_integration?: any;
  sessions?: any[];
  serve_development?: any;
  volley_development?: any;
}

export interface LegacyStrengthTraining {
  phase_id: string;
  title: string;
  anchor_id: string;
  session_name?: string;
  total_duration?: number;
  exercise_count?: number;
  primary_focus?: string;
  secondary_focus?: string;
  
  main_exercises?: LegacyExercise[];
  phase_2_integration?: any;
  advanced_tendon_conditioning?: any;
  stability_power_block?: any;
  core_stability_block?: any;
}

export interface LegacyExercise {
  exercise_id: string;
  name: string;
  category?: string;
  muscle_groups?: string[];
  sets: number | string;
  reps: number | string;
  load?: string;
  rest_seconds?: number;
  tempo?: string;
  video_url?: string;
  detailed_instructions?: string[];
  instructions?: string[];
  technique_cues?: string[];
  professional_cues?: string[];
  cues?: string[];
  set_tracking?: SetTracking[];
}

export interface LegacyRecoveryProtocol {
  phase_id: string;
  title: string;
  anchor_id: string;
  duration: number;
  
  // Various recovery structures
  contrast_shower?: any;
  hrv_breathing?: any;
  session_documentation?: any;
}

// Data transformation utility types
export interface TransformationContext {
  sourceFile: string;
  targetSchema: 'unified';
  preserveContent: boolean;
  validateOutput: boolean;
}

export interface TransformationResult {
  success: boolean;
  data?: WorkoutData;
  errors?: string[];
  warnings?: string[];
  contentPreserved: boolean;
}

// Component prop types
export interface WorkoutSectionProps {
  data: WorkoutData;
}

export interface AssessmentSectionProps {
  assessments: Assessment[];
}

export interface ExerciseSectionProps {
  exercises: Exercise[];
}

export interface TimelineSectionProps {
  timeline: TimelineEntry[];
}

// Export utility type for dynamic imports
export type WorkoutDataImport = Promise<{ default: WorkoutData }>;

// Phase identifier constants
export const PHASE_IDS = {
  MORNING: 'morning',
  TENNIS: 'tennis', 
  MOVEMENT: 'movement',
  STRENGTH: 'strength',
  CONDITIONING: 'conditioning',
  RECOVERY: 'recovery',
  ASSESSMENT: 'assessment'
} as const;

export type PhaseId = typeof PHASE_IDS[keyof typeof PHASE_IDS];